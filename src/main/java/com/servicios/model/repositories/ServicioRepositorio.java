package com.servicios.model.repositories;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.servicios.model.entities.Servicio;

// üìå ¬øQu√© hace un repository?
// Conecta la entidad con la base de datos.

// Hereda m√©todos ya listos como: save(), findById(), findAll(), delete(), etc.

// Pod√©s agregar m√©todos personalizados con nombres como findByNombre, findByPrecioGreaterThan, etc.

// ‚úÖ ¬øQu√© hay que tener en cuenta?
// Ten√©s que usar @Repository (opcional pero recomendado por claridad).

// El primer par√°metro de JpaRepository es la entidad y el segundo es el tipo de su ID (Long, Integer, etc.).

// Spring hace toda la magia, no necesit√°s implementaciones.

// üß± Siguiente paso:
// Ya con tu ServicioRepository creado, podr√≠as ir al service y empezar a usarlo para hacer l√≥gica de negocio. Si quer√©s, te muestro c√≥mo va la clase de servicio (ServicioService).

// ¬øTe muestro un ejemplo de ServicioService con m√©todos b√°sicos o quer√©s que implementemos uno m√°s espec√≠fico, como buscar por nombre o crear un servicio?
@Repository
public interface ServicioRepositorio extends JpaRepository<Servicio, Long>{

    @Query(value = "SELECT * FROM servicios", nativeQuery = true)
    List<Servicio> getAllServicios();
}
